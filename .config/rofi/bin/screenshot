#!/usr/bin/env bash

# Get the currently focused monitor using swaymsg (works in sway/Wayland environments)
monitor=$(swaymsg -t get_outputs | jq -r '.[] | select(.focused) | .name')

# Rofi command
rofi_command="rofi -monitor $monitor -theme $HOME/.config/rofi/config/screenshot.rasi"

# Get current time for file naming
time=$(date +%Y-%m-%d-%I-%M-%S)
# Get the screen geometry from swaymsg (not xrandr)
geometry=$(swaymsg -t get_outputs | jq -r '.[] | select(.focused) | .current_mode.width, .current_mode.height' | tr '\n' 'x')
# Set the directory for screenshots
dir="$(xdg-user-dir PICTURES)/Screenshots"
file="Screenshot_${time}_${geometry}.png"

# Icons for notifications
icon1="$HOME/.config/dunst/icons/collections.svg"
icon2="$HOME/.config/dunst/icons/timer.svg"

# Buttons layout from Rofi configuration
layout=$(grep BUTTON "$HOME/.config/rofi/config/screenshot.rasi" | cut -d'=' -f2 | tr -d '[:blank:],*/')
if [[ "$layout" == "TRUE" ]]; then
    screen="󰍹"
    area="󰆞"
    window="󰖲"
    infive="󰔝"
    inten="󰔜"
else
    screen="󰍹 Capture Desktop"
    area="󰆞 Capture Area"
    window="󰖲 Capture Window"
    infive="󰔝 Take in 3s"
    inten="󰔜 Take in 10s"
fi

# Notify and view screenshot using `notify-send` and `swayimg` (or any compatible viewer)
notify_view () {
    notify-send -u low --replace-id 699 -i "$icon1" "Copied to clipboard."
    viewnior "${dir}/$file"  # Replace with your image viewer if necessary
    if [[ -e "$dir/$file" ]]; then
        notify-send -u low --replace-id 699 -i "$icon1" "Screenshot Saved."
    else
        notify-send -u low --replace-id 699 -i "$icon1" "Screenshot Deleted."
    fi
}

# Countdown function with notify-send
countdown() {
    for sec in $(seq $1 -1 1); do
        notify-send -t 1000 --replace-id 699 -i "$icon2" "Taking shot in: $sec"
        sleep 1
    done
}

# Take a full-screen shot now using `grim` and copy to clipboard with `wl-copy`
shotnow() {
    cd "$dir" && sleep 0.5 && grim "$file" && wl-copy < "$file"
    notify_view
}

# Take a screenshot after 3 seconds
shot5() {
    countdown '3'
    sleep 1 && cd "$dir" && grim "$file" && wl-copy < "$file"
    notify_view
}

# Take a screenshot after 10 seconds
shot10() {
    countdown '10'
    sleep 1 && cd "$dir" && grim "$file" && wl-copy < "$file"
    notify_view
}

# Take a screenshot of the active window (focused container) using `grim`
shotwin() {
    focused_window=$(swaymsg -t get_tree | jq -r '.. | select(.type? == "con" and .focused == true) | .rect | "\(.x),\(.y) \(.width)x\(.height)"')
    cd "$dir" && grim -g "$focused_window" "$file" && wl-copy < "$file"
    notify_view
}

# Select an area to capture using `slurp` (a Wayland-compatible area selector)
shotarea() {
    cd "$dir" && sleep 0.1 && grim -g "$(slurp)" "$file" && wl-copy < "$file"
    notify_view
}

# Ensure the screenshot directory exists
if [[ ! -d "$dir" ]]; then
    mkdir -p "$dir"
fi

# Variable passed to rofi for screenshot options
options="$screen\n$area\n$window\n$infive\n$inten"

# Display the Rofi menu for screenshot options and execute the corresponding function
chosen=$(echo -e "$options" | $rofi_command -p 'Take A Shot' -dmenu -selected-row 0)

# Use a case statement to map the selected option to its corresponding function
case $chosen in
    $screen)
        shotnow
        ;;
    $area)
        shotarea
        ;;
    $window)
        shotwin
        ;;
    $infive)
        shot5
        ;;
    $inten)
        shot10
        ;;
esac
